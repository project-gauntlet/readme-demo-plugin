var dist = {};

var gameOfLife = {};

Object.defineProperty(gameOfLife, "__esModule", { value: true });
gameOfLife.GameOfLife = void 0;
var GameOfLife = /** @class */ (function () {
    function GameOfLife(props) {
        var _this = this;
        this.neighbors = function () {
            return _this.cells.flat().map(function (_, i) {
                var y = Math.trunc(i / _this.width);
                var x = i - _this.width * y;
                var hasNorth = y > 0;
                var hasSouth = y < _this.height - 1;
                var hasEast = x < _this.width - 1;
                var hasWest = x > 0;
                var result = [
                    hasNorth && hasWest ? i - _this.width - 1 : -1,
                    hasNorth ? i - _this.width : -1,
                    hasNorth && hasEast ? i - _this.width + 1 : -1,
                    hasWest ? i - 1 : -1,
                    hasEast ? i + 1 : -1,
                    hasSouth && hasWest ? i + _this.width - 1 : -1,
                    hasSouth ? i + _this.width : -1,
                    hasSouth && hasEast ? i + _this.width + 1 : -1,
                ];
                return result.filter(function (v) { return v > -1; });
            });
        };
        this.add = function (cells) {
            _this.cells = _this.cells.map(function (h, i) {
                return h.map(function (w, j) {
                    if (cells.find(function (_a) {
                        var width = _a.width, height = _a.height;
                        return width === j && height === i;
                    }))
                        return 1;
                    return w;
                });
            });
            return _this.cells;
        };
        this.remove = function (cells) {
            _this.cells = _this.cells.map(function (h, i) {
                return h.map(function (w, j) {
                    if (cells.find(function (_a) {
                        var width = _a.width, height = _a.height;
                        return width === j && height === i;
                    }))
                        return 0;
                    return w;
                });
            });
            return _this.cells;
        };
        this.toogle = function (cells) {
            _this.cells = _this.cells.map(function (h, i) {
                return h.map(function (w, j) {
                    if (cells.find(function (_a) {
                        var width = _a.width, height = _a.height;
                        return width === j && height === i;
                    }))
                        return w === 1 ? 0 : 1;
                    return w;
                });
            });
            return _this.cells;
        };
        this.next = function () {
            var neighbors = _this.neighbors();
            var data = _this.cells.flat();
            var result = data.map(function (cell, i) {
                var n = neighbors[i]
                    .map(function (index) { return data[index]; })
                    .reduce(function (a, b) { return a + b; }, 0);
                if (cell === 1 && n < 2)
                    return 0;
                if (cell === 1 && n > 3)
                    return 0;
                if (cell === 0 && n === 3)
                    return 1;
                return cell;
            });
            result.forEach(function (v, i) {
                var index = Math.trunc(i / _this.width);
                _this.cells[index][i - _this.width * index] = v;
            });
            return _this.cells;
        };
        this.width = props.width;
        this.height = props.height;
        this.cells = Array.from({ length: this.height }, function (_v, h) {
            return Array.from({ length: _this.width }, function (_v, w) {
                if (!props.initialCell ||
                    !props.initialCell.find(function (_a) {
                        var height = _a.height;
                        return height === h;
                    }) ||
                    !props.initialCell.find(function (_a) {
                        var height = _a.height, width = _a.width;
                        return width === w && height === h;
                    }))
                    return 0;
                return 1;
            });
        });
        this.tempCells = this.cells;
    }
    return GameOfLife;
}());
gameOfLife.GameOfLife = GameOfLife;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.GameOfLife = void 0;
	var gameOfLife_1 = gameOfLife;
	Object.defineProperty(exports, "GameOfLife", { enumerable: true, get: function () { return gameOfLife_1.GameOfLife; } });
	exports.default = gameOfLife_1.GameOfLife; 
} (dist));

export { dist as d };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
